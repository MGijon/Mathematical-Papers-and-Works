#knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
point <- geocode('Calle Jordi Girona 33, Barcelona, España', source="google")
#install.packages('ggmap')    # uncomented to intall the library if need it
library(ggmap)
point <- geocode('Calle Jordi Girona 33, Barcelona, España', source="google")
print(point)
point <- geocode('Calle Jordi Girona 33, Barcelona, España', source="google")
summary(point)
point <- geocode('Calle Jordi Girona 33, Barcelona, España', source="google")
point <- geocode('Calle Jordi Girona 33, Barcelona, España', source="google")
qqmap(point)
point <- geocode('Calle Jordi Girona 33, Barcelona, España', source="google")
qmap(point)
point <- geocode('Calle Jordi Girona 33, Barcelona, España', source="google")
names(point)
str(point)
point <- geocode('Calle Jordi Girona 33, Barcelona, España', source="google")
names(point)
str(point)
print(point$lon)
print(point$lat)
point <- geocode('Plaza Cataluña, Barcelona, España', source="google")
names(point)
str(point)
print(point$lon)
print(point$lat)
point <- geocode('Barcelona, España', source="google")
names(point)
str(point)
print(point$lon)
print(point$lat)
point <- geocode('Barcelona, España', source="google")
names(point)
str(point)
print(point$lon)
print(point$lat)
point <- geocode('Calle Ample 53, Barcelona, España', source="google")
names(point)
str(point)
print(point$lon)
print(point$lat)
qmap(location = "barcelona")
qmap(location = "barcelona")
point <- geocode('Calle Ample 53, Barcelona, España', source="google")
names(point)
str(point)
print(point$lon)
print(point$lat)
point <- geocode('Calle Ample 53, Barcelona, España', source="google")
type(point)
install.packages(library(shiny)
ui <- fluidPage(
)
server <- function(input, output, session) {
}
shinyApp(ui, server))
install.packages(shiny)
install.packages("shiny")
library(shiny)
runExample(example = "01_hello")
point <- geocode('Calle Ample 4, Barcelona, España', source="google")
names(point)      # we can check the names of the returned data.frame object
print(point$lon)
print(point$lat)
point <- geocode('Calle Ample 4, Barcelona, España')
names(point)      # we can check the names of the returned data.frame object
print(point$lon)
print(point$lat)
point <- geocode('Calle Ample 4, Barcelona, España')
names(point)      # we can check the names of the returned data.frame object
print(point$lon)
print(point$lat)
1/50
1/50 * 270
pchisq(5.4)
pchisq(2, 5.4)
pnorm(300, 30, 270)
help("dist")
help("distributions")
1 - pnorm(300, 30, 270)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("ggplot")  # uncommented in case it is not installed
library(ggplot2)
# Setup
options(scipen=999)  # turn off scientific notation like 1e+06
data("midwest", package = "ggplot2")  # load the data
#midwest <- read.csv("http://goo.gl/G1K41K") # alt source
# Init Ggplot
ggplot(midwest, aes(x=area, y=poptotal))  # area and poptotal are columns in 'midwest'```
ggplot(midwest, aes(x=area, y=poptotal)) + geom_point()
g <- ggplot(midwest, aes(x=area, y=poptotal)) + geom_point() + geom_smooth(method="lm")  # set se=FALSE to turnoff confidence bands
plot(g)
g <- ggplot(midwest, aes(x=area, y=poptotal)) + geom_point() + geom_smooth(method="lm")  # set se=FALSE to turnoff confidence bands
plot(g)
g <- ggplot(midwest, aes(x=area, y=poptotal)) + geom_point() + geom_smooth(method="lm")  # set se=FALSE to turnoff confidence bands
# Delete the points outside the limits
g + xlim(c(0, 0.1)) + ylim(c(0, 1000000))   # deletes points
# g + xlim(0, 0.1) + ylim(0, 1000000)   # deletes points
g <- ggplot(midwest, aes(x=area, y=poptotal)) + geom_point() + geom_smooth(method="lm")  # set se=FALSE to turnoff confidence bands
# Zoom in without deleting the points outside the limits.
# As a result, the line of best fit is the same as the original plot.
g1 <- g + coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000))  # zooms in
plot(g1)
ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point() +
geom_smooth(method="lm") +
coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(col="steelblue", size=3) +   # Set static color and size for points
geom_smooth(method="lm", col="firebrick") +  # change the color of line
coord_cartesian(xlim=c(0, 0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=3) +  # Set color to vary based on state categories.
geom_smooth(method="lm", col="firebrick", size=2) +
coord_cartesian(xlim=c(0, 0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
plot(gg)
install.packages("RColorBrewer")
library(RColorBrewer)
head(brewer.pal.info, 10)  # show 10 palettes
# Base plot
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=3) +  # Set color to vary based on state categories.
geom_smooth(method="lm", col="firebrick", size=2) +
coord_cartesian(xlim=c(0, 0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
# Change breaks
gg + scale_x_continuous(breaks=seq(0, 0.1, 0.01))
gg + scale_x_continuous(breaks=seq(0, 0.1, 0.01), labels = letters[1:11])
# Reverse X Axis Scale
gg + scale_x_reverse()
gg + scale_x_continuous(breaks=seq(0, 0.1, 0.01), labels = letters[1:11])
# Reverse X Axis Scale
gg + scale_x_reverse()
#trinstall.packages("RColorBrewer")    # uncommented in case it is not installed
library(RColorBrewer)
kable(head(brewer.pal.info, 10))  # show 10 palettes
g <- ggplot(midwest, aes(x = area, y = poptotal)) + geom_point() + geom_smooth(method = "lm", se=FALSE)
# Delete the points outside the limits
g + xlim(c(0, 0.1)) + ylim(c(0, 1000000))   # deletes points
g <- ggplot(midwest, aes(x = area, y = poptotal)) + geom_point() + geom_smooth(method = "lm", se=FALSE)
# Delete the points outside the limits
g + xlim(c(0, 0.1)) + ylim(c(0, 500000))   # deletes points
knitr::opts_chunk$set(echo = TRUE)
#install.packages("ggplot")  # uncommented in case it is not installed
library(ggplot2)
# Setup
options(scipen=999)  # turn off scientific notation like 1e+06
data("midwest", package = "ggplot2")  # load the data
# Init ggplot
ggplot(midwest, aes(x = area, y = poptotal))  # area and poptotal are columns in 'midwest'```
ggplot(midwest, aes(x = area, y = poptotal)) + geom_point()
g <- ggplot(midwest, aes(x = area, y = poptotal)) + geom_point() + geom_smooth(method = "lm")
plot(g)
g <- ggplot(midwest, aes(x = area, y = poptotal)) + geom_point() + geom_smooth(method = "lm", se=FALSE)
# Delete the points outside the limits
g + xlim(c(0, 0.1)) + ylim(c(0, 500000))   # deletes points
g <- ggplot(midwest, aes(x=area, y=poptotal)) + geom_point() + geom_smooth(method="lm")  # set se=FALSE to turnoff confidence bands
# Zoom in without deleting the points outside the limits.
# As a result, the line of best fit is the same as the original plot.
g1 <- g + coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000))  # zooms in
plot(g1)
ggplot(midwest, aes(x = area, y = poptotal)) +
geom_point() +
geom_smooth(method = "lm") +
coord_cartesian(xlim = c(0,0.1), ylim = c(0, 1000000)) +
labs(title = "Area Vs Population",
subtitle = "From midwest dataset",
y = "Population",
x = "Area",
caption = "Midwest Demographics")
ggplot(midwest, aes(x = area, y = poptotal)) +
geom_point(col = "steelblue", size = 3) +   # Set static color and size for points
geom_smooth(method = "lm", col = "firebrick") +  # change the color of line
coord_cartesian(xlim = c(0, 0.1), ylim = c(0, 1000000)) +
labs(title = "Area Vs Population",
subtitle = "From midwest dataset",
y = "Population",
x = "Area",
caption = "Midwest Demographics")
gg <- ggplot(midwest, aes(x = area, y = poptotal)) +
geom_point(aes(col = state), size = 3) +  # Set color to vary based on state categories.
geom_smooth(method = "lm", col = "firebrick", size = 2) +
coord_cartesian(xlim = c(0, 0.1), ylim = c(0, 1000000)) +
labs(title = "Area Vs Population",
subtitle = "From midwest dataset",
y = "Population",
x = "Area", caption = "Midwest Demographics")
plot(gg)
#trinstall.packages("RColorBrewer")    # uncommented in case it is not installed
library(RColorBrewer)
head(brewer.pal.info, 10)
# Reverse X Axis Scale
gg + scale_x_reverse()
electric
qnorm(100, 40, 95)
pnorm(100, 40, 95)
plot(norm(100, 40))
pnorm(100, 5, 95)
knitr::opts_chunk$set(echo = TRUE)
#install.packages('knitr')    # uncomented to intall the library if need it
library(knitr)    # just to generate this tutorial
#install.packages('ggplot2')    # uncomented to intall the library if need it
library(ggplot2)   # for plotting
#install.packages('ggmap')    # uncomented to intall the library if need it
library(ggmap)    # for working with maps
point <- geocode('Calle Ample 4, Barcelona, España', source = "google")
names(point)      # we can check the names of the returned data.frame object
print(point$lon)
print(point$lat)
address <- revgeocode(as.numeric(point))
install.packages("bioconductor")
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite()
setwd("~/Documents/Programación/Mathematical-Papers-and-Works/Estadística para la Gestión Empresarial")
